// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "01/23/2024 14:34:57"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    CONTROL_PRODUCCION_SIMULAR
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module CONTROL_PRODUCCION_SIMULAR_vlg_sample_tst(
	bcd,
	CLK_1MHZ,
	clk_100hz,
	enter,
	mostrar,
	num,
	ok,
	reset,
	start,
	sampler_tx
);
input [3:0] bcd;
input  CLK_1MHZ;
input  clk_100hz;
input  enter;
input  mostrar;
input  num;
input  ok;
input  reset;
input  start;
output sampler_tx;

reg sample;
time current_time;
always @(bcd or CLK_1MHZ or clk_100hz or enter or mostrar or num or ok or reset or start)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module CONTROL_PRODUCCION_SIMULAR_vlg_check_tst (
	dia_rep,
	pro_real,
	pro_rep,
	tasa_prod,
	sampler_rx
);
input [4:0] dia_rep;
input [8:0] pro_real;
input [8:0] pro_rep;
input [6:0] tasa_prod;
input sampler_rx;

reg [4:0] dia_rep_expected;
reg [8:0] pro_real_expected;
reg [8:0] pro_rep_expected;
reg [6:0] tasa_prod_expected;

reg [4:0] dia_rep_prev;
reg [8:0] pro_real_prev;
reg [8:0] pro_rep_prev;
reg [6:0] tasa_prod_prev;

reg [4:0] dia_rep_expected_prev;
reg [8:0] pro_real_expected_prev;
reg [8:0] pro_rep_expected_prev;
reg [6:0] tasa_prod_expected_prev;

reg [4:0] last_dia_rep_exp;
reg [8:0] last_pro_real_exp;
reg [8:0] last_pro_rep_exp;
reg [6:0] last_tasa_prod_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:4] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 4'b1;
end

// update real /o prevs

always @(trigger)
begin
	dia_rep_prev = dia_rep;
	pro_real_prev = pro_real;
	pro_rep_prev = pro_rep;
	tasa_prod_prev = tasa_prod;
end

// update expected /o prevs

always @(trigger)
begin
	dia_rep_expected_prev = dia_rep_expected;
	pro_real_expected_prev = pro_real_expected;
	pro_rep_expected_prev = pro_rep_expected;
	tasa_prod_expected_prev = tasa_prod_expected;
end


// expected tasa_prod[ 6 ]
initial
begin
	tasa_prod_expected[6] = 1'bX;
	tasa_prod_expected[6] = #999000 1'b0;
end 
// expected tasa_prod[ 5 ]
initial
begin
	tasa_prod_expected[5] = 1'bX;
	tasa_prod_expected[5] = #999000 1'b0;
end 
// expected tasa_prod[ 4 ]
initial
begin
	tasa_prod_expected[4] = 1'bX;
	tasa_prod_expected[4] = #999000 1'b0;
end 
// expected tasa_prod[ 3 ]
initial
begin
	tasa_prod_expected[3] = 1'bX;
	tasa_prod_expected[3] = #999000 1'b0;
end 
// expected tasa_prod[ 2 ]
initial
begin
	tasa_prod_expected[2] = 1'bX;
	tasa_prod_expected[2] = #999000 1'b0;
end 
// expected tasa_prod[ 1 ]
initial
begin
	tasa_prod_expected[1] = 1'bX;
	tasa_prod_expected[1] = #999000 1'b0;
end 
// expected tasa_prod[ 0 ]
initial
begin
	tasa_prod_expected[0] = 1'bX;
	tasa_prod_expected[0] = #999000 1'b0;
end 
// expected pro_real[ 8 ]
initial
begin
	pro_real_expected[8] = 1'bX;
	pro_real_expected[8] = #999000 1'b0;
end 
// expected pro_real[ 7 ]
initial
begin
	pro_real_expected[7] = 1'bX;
	pro_real_expected[7] = #999000 1'b0;
end 
// expected pro_real[ 6 ]
initial
begin
	pro_real_expected[6] = 1'bX;
	pro_real_expected[6] = #999000 1'b0;
end 
// expected pro_real[ 5 ]
initial
begin
	pro_real_expected[5] = 1'bX;
	pro_real_expected[5] = #999000 1'b0;
end 
// expected pro_real[ 4 ]
initial
begin
	pro_real_expected[4] = 1'bX;
	pro_real_expected[4] = #999000 1'b0;
end 
// expected pro_real[ 3 ]
initial
begin
	pro_real_expected[3] = 1'bX;
	pro_real_expected[3] = #999000 1'b0;
end 
// expected pro_real[ 2 ]
initial
begin
	pro_real_expected[2] = 1'bX;
	pro_real_expected[2] = #999000 1'b0;
end 
// expected pro_real[ 1 ]
initial
begin
	pro_real_expected[1] = 1'bX;
	pro_real_expected[1] = #999000 1'b0;
end 
// expected pro_real[ 0 ]
initial
begin
	pro_real_expected[0] = 1'bX;
	pro_real_expected[0] = #999000 1'b0;
end 
// expected pro_rep[ 8 ]
initial
begin
	pro_rep_expected[8] = 1'bX;
	pro_rep_expected[8] = #999000 1'b0;
end 
// expected pro_rep[ 7 ]
initial
begin
	pro_rep_expected[7] = 1'bX;
	pro_rep_expected[7] = #999000 1'b0;
end 
// expected pro_rep[ 6 ]
initial
begin
	pro_rep_expected[6] = 1'bX;
	pro_rep_expected[6] = #999000 1'b0;
end 
// expected pro_rep[ 5 ]
initial
begin
	pro_rep_expected[5] = 1'bX;
	pro_rep_expected[5] = #999000 1'b0;
end 
// expected pro_rep[ 4 ]
initial
begin
	pro_rep_expected[4] = 1'bX;
	pro_rep_expected[4] = #999000 1'b0;
end 
// expected pro_rep[ 3 ]
initial
begin
	pro_rep_expected[3] = 1'bX;
	pro_rep_expected[3] = #999000 1'b0;
end 
// expected pro_rep[ 2 ]
initial
begin
	pro_rep_expected[2] = 1'bX;
	pro_rep_expected[2] = #999000 1'b0;
end 
// expected pro_rep[ 1 ]
initial
begin
	pro_rep_expected[1] = 1'bX;
	pro_rep_expected[1] = #999000 1'b0;
end 
// expected pro_rep[ 0 ]
initial
begin
	pro_rep_expected[0] = 1'bX;
	pro_rep_expected[0] = #999000 1'b0;
end 
// expected dia_rep[ 4 ]
initial
begin
	dia_rep_expected[4] = 1'bX;
	dia_rep_expected[4] = #999000 1'b0;
end 
// expected dia_rep[ 3 ]
initial
begin
	dia_rep_expected[3] = 1'bX;
	dia_rep_expected[3] = #999000 1'b0;
end 
// expected dia_rep[ 2 ]
initial
begin
	dia_rep_expected[2] = 1'bX;
	dia_rep_expected[2] = #999000 1'b0;
end 
// expected dia_rep[ 1 ]
initial
begin
	dia_rep_expected[1] = 1'bX;
	dia_rep_expected[1] = #999000 1'b0;
end 
// expected dia_rep[ 0 ]
initial
begin
	dia_rep_expected[0] = 1'bX;
	dia_rep_expected[0] = #999000 1'b0;
end 
// generate trigger
always @(dia_rep_expected or dia_rep or pro_real_expected or pro_real or pro_rep_expected or pro_rep or tasa_prod_expected or tasa_prod)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected dia_rep = %b | expected pro_real = %b | expected pro_rep = %b | expected tasa_prod = %b | ",dia_rep_expected_prev,pro_real_expected_prev,pro_rep_expected_prev,tasa_prod_expected_prev);
	$display("| real dia_rep = %b | real pro_real = %b | real pro_rep = %b | real tasa_prod = %b | ",dia_rep_prev,pro_real_prev,pro_rep_prev,tasa_prod_prev);
`endif
	if (
		( dia_rep_expected_prev[0] !== 1'bx ) && ( dia_rep_prev[0] !== dia_rep_expected_prev[0] )
		&& ((dia_rep_expected_prev[0] !== last_dia_rep_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dia_rep[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dia_rep_expected_prev);
		$display ("     Real value = %b", dia_rep_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dia_rep_exp[0] = dia_rep_expected_prev[0];
	end
	if (
		( dia_rep_expected_prev[1] !== 1'bx ) && ( dia_rep_prev[1] !== dia_rep_expected_prev[1] )
		&& ((dia_rep_expected_prev[1] !== last_dia_rep_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dia_rep[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dia_rep_expected_prev);
		$display ("     Real value = %b", dia_rep_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dia_rep_exp[1] = dia_rep_expected_prev[1];
	end
	if (
		( dia_rep_expected_prev[2] !== 1'bx ) && ( dia_rep_prev[2] !== dia_rep_expected_prev[2] )
		&& ((dia_rep_expected_prev[2] !== last_dia_rep_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dia_rep[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dia_rep_expected_prev);
		$display ("     Real value = %b", dia_rep_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dia_rep_exp[2] = dia_rep_expected_prev[2];
	end
	if (
		( dia_rep_expected_prev[3] !== 1'bx ) && ( dia_rep_prev[3] !== dia_rep_expected_prev[3] )
		&& ((dia_rep_expected_prev[3] !== last_dia_rep_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dia_rep[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dia_rep_expected_prev);
		$display ("     Real value = %b", dia_rep_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dia_rep_exp[3] = dia_rep_expected_prev[3];
	end
	if (
		( dia_rep_expected_prev[4] !== 1'bx ) && ( dia_rep_prev[4] !== dia_rep_expected_prev[4] )
		&& ((dia_rep_expected_prev[4] !== last_dia_rep_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dia_rep[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dia_rep_expected_prev);
		$display ("     Real value = %b", dia_rep_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dia_rep_exp[4] = dia_rep_expected_prev[4];
	end
	if (
		( pro_real_expected_prev[0] !== 1'bx ) && ( pro_real_prev[0] !== pro_real_expected_prev[0] )
		&& ((pro_real_expected_prev[0] !== last_pro_real_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pro_real[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pro_real_expected_prev);
		$display ("     Real value = %b", pro_real_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_pro_real_exp[0] = pro_real_expected_prev[0];
	end
	if (
		( pro_real_expected_prev[1] !== 1'bx ) && ( pro_real_prev[1] !== pro_real_expected_prev[1] )
		&& ((pro_real_expected_prev[1] !== last_pro_real_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pro_real[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pro_real_expected_prev);
		$display ("     Real value = %b", pro_real_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_pro_real_exp[1] = pro_real_expected_prev[1];
	end
	if (
		( pro_real_expected_prev[2] !== 1'bx ) && ( pro_real_prev[2] !== pro_real_expected_prev[2] )
		&& ((pro_real_expected_prev[2] !== last_pro_real_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pro_real[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pro_real_expected_prev);
		$display ("     Real value = %b", pro_real_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_pro_real_exp[2] = pro_real_expected_prev[2];
	end
	if (
		( pro_real_expected_prev[3] !== 1'bx ) && ( pro_real_prev[3] !== pro_real_expected_prev[3] )
		&& ((pro_real_expected_prev[3] !== last_pro_real_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pro_real[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pro_real_expected_prev);
		$display ("     Real value = %b", pro_real_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_pro_real_exp[3] = pro_real_expected_prev[3];
	end
	if (
		( pro_real_expected_prev[4] !== 1'bx ) && ( pro_real_prev[4] !== pro_real_expected_prev[4] )
		&& ((pro_real_expected_prev[4] !== last_pro_real_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pro_real[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pro_real_expected_prev);
		$display ("     Real value = %b", pro_real_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_pro_real_exp[4] = pro_real_expected_prev[4];
	end
	if (
		( pro_real_expected_prev[5] !== 1'bx ) && ( pro_real_prev[5] !== pro_real_expected_prev[5] )
		&& ((pro_real_expected_prev[5] !== last_pro_real_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pro_real[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pro_real_expected_prev);
		$display ("     Real value = %b", pro_real_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_pro_real_exp[5] = pro_real_expected_prev[5];
	end
	if (
		( pro_real_expected_prev[6] !== 1'bx ) && ( pro_real_prev[6] !== pro_real_expected_prev[6] )
		&& ((pro_real_expected_prev[6] !== last_pro_real_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pro_real[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pro_real_expected_prev);
		$display ("     Real value = %b", pro_real_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_pro_real_exp[6] = pro_real_expected_prev[6];
	end
	if (
		( pro_real_expected_prev[7] !== 1'bx ) && ( pro_real_prev[7] !== pro_real_expected_prev[7] )
		&& ((pro_real_expected_prev[7] !== last_pro_real_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pro_real[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pro_real_expected_prev);
		$display ("     Real value = %b", pro_real_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_pro_real_exp[7] = pro_real_expected_prev[7];
	end
	if (
		( pro_real_expected_prev[8] !== 1'bx ) && ( pro_real_prev[8] !== pro_real_expected_prev[8] )
		&& ((pro_real_expected_prev[8] !== last_pro_real_exp[8]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pro_real[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pro_real_expected_prev);
		$display ("     Real value = %b", pro_real_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_pro_real_exp[8] = pro_real_expected_prev[8];
	end
	if (
		( pro_rep_expected_prev[0] !== 1'bx ) && ( pro_rep_prev[0] !== pro_rep_expected_prev[0] )
		&& ((pro_rep_expected_prev[0] !== last_pro_rep_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pro_rep[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pro_rep_expected_prev);
		$display ("     Real value = %b", pro_rep_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_pro_rep_exp[0] = pro_rep_expected_prev[0];
	end
	if (
		( pro_rep_expected_prev[1] !== 1'bx ) && ( pro_rep_prev[1] !== pro_rep_expected_prev[1] )
		&& ((pro_rep_expected_prev[1] !== last_pro_rep_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pro_rep[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pro_rep_expected_prev);
		$display ("     Real value = %b", pro_rep_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_pro_rep_exp[1] = pro_rep_expected_prev[1];
	end
	if (
		( pro_rep_expected_prev[2] !== 1'bx ) && ( pro_rep_prev[2] !== pro_rep_expected_prev[2] )
		&& ((pro_rep_expected_prev[2] !== last_pro_rep_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pro_rep[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pro_rep_expected_prev);
		$display ("     Real value = %b", pro_rep_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_pro_rep_exp[2] = pro_rep_expected_prev[2];
	end
	if (
		( pro_rep_expected_prev[3] !== 1'bx ) && ( pro_rep_prev[3] !== pro_rep_expected_prev[3] )
		&& ((pro_rep_expected_prev[3] !== last_pro_rep_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pro_rep[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pro_rep_expected_prev);
		$display ("     Real value = %b", pro_rep_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_pro_rep_exp[3] = pro_rep_expected_prev[3];
	end
	if (
		( pro_rep_expected_prev[4] !== 1'bx ) && ( pro_rep_prev[4] !== pro_rep_expected_prev[4] )
		&& ((pro_rep_expected_prev[4] !== last_pro_rep_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pro_rep[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pro_rep_expected_prev);
		$display ("     Real value = %b", pro_rep_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_pro_rep_exp[4] = pro_rep_expected_prev[4];
	end
	if (
		( pro_rep_expected_prev[5] !== 1'bx ) && ( pro_rep_prev[5] !== pro_rep_expected_prev[5] )
		&& ((pro_rep_expected_prev[5] !== last_pro_rep_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pro_rep[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pro_rep_expected_prev);
		$display ("     Real value = %b", pro_rep_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_pro_rep_exp[5] = pro_rep_expected_prev[5];
	end
	if (
		( pro_rep_expected_prev[6] !== 1'bx ) && ( pro_rep_prev[6] !== pro_rep_expected_prev[6] )
		&& ((pro_rep_expected_prev[6] !== last_pro_rep_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pro_rep[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pro_rep_expected_prev);
		$display ("     Real value = %b", pro_rep_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_pro_rep_exp[6] = pro_rep_expected_prev[6];
	end
	if (
		( pro_rep_expected_prev[7] !== 1'bx ) && ( pro_rep_prev[7] !== pro_rep_expected_prev[7] )
		&& ((pro_rep_expected_prev[7] !== last_pro_rep_exp[7]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pro_rep[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pro_rep_expected_prev);
		$display ("     Real value = %b", pro_rep_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_pro_rep_exp[7] = pro_rep_expected_prev[7];
	end
	if (
		( pro_rep_expected_prev[8] !== 1'bx ) && ( pro_rep_prev[8] !== pro_rep_expected_prev[8] )
		&& ((pro_rep_expected_prev[8] !== last_pro_rep_exp[8]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pro_rep[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pro_rep_expected_prev);
		$display ("     Real value = %b", pro_rep_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_pro_rep_exp[8] = pro_rep_expected_prev[8];
	end
	if (
		( tasa_prod_expected_prev[0] !== 1'bx ) && ( tasa_prod_prev[0] !== tasa_prod_expected_prev[0] )
		&& ((tasa_prod_expected_prev[0] !== last_tasa_prod_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tasa_prod[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tasa_prod_expected_prev);
		$display ("     Real value = %b", tasa_prod_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_tasa_prod_exp[0] = tasa_prod_expected_prev[0];
	end
	if (
		( tasa_prod_expected_prev[1] !== 1'bx ) && ( tasa_prod_prev[1] !== tasa_prod_expected_prev[1] )
		&& ((tasa_prod_expected_prev[1] !== last_tasa_prod_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tasa_prod[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tasa_prod_expected_prev);
		$display ("     Real value = %b", tasa_prod_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_tasa_prod_exp[1] = tasa_prod_expected_prev[1];
	end
	if (
		( tasa_prod_expected_prev[2] !== 1'bx ) && ( tasa_prod_prev[2] !== tasa_prod_expected_prev[2] )
		&& ((tasa_prod_expected_prev[2] !== last_tasa_prod_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tasa_prod[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tasa_prod_expected_prev);
		$display ("     Real value = %b", tasa_prod_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_tasa_prod_exp[2] = tasa_prod_expected_prev[2];
	end
	if (
		( tasa_prod_expected_prev[3] !== 1'bx ) && ( tasa_prod_prev[3] !== tasa_prod_expected_prev[3] )
		&& ((tasa_prod_expected_prev[3] !== last_tasa_prod_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tasa_prod[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tasa_prod_expected_prev);
		$display ("     Real value = %b", tasa_prod_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_tasa_prod_exp[3] = tasa_prod_expected_prev[3];
	end
	if (
		( tasa_prod_expected_prev[4] !== 1'bx ) && ( tasa_prod_prev[4] !== tasa_prod_expected_prev[4] )
		&& ((tasa_prod_expected_prev[4] !== last_tasa_prod_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tasa_prod[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tasa_prod_expected_prev);
		$display ("     Real value = %b", tasa_prod_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_tasa_prod_exp[4] = tasa_prod_expected_prev[4];
	end
	if (
		( tasa_prod_expected_prev[5] !== 1'bx ) && ( tasa_prod_prev[5] !== tasa_prod_expected_prev[5] )
		&& ((tasa_prod_expected_prev[5] !== last_tasa_prod_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tasa_prod[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tasa_prod_expected_prev);
		$display ("     Real value = %b", tasa_prod_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_tasa_prod_exp[5] = tasa_prod_expected_prev[5];
	end
	if (
		( tasa_prod_expected_prev[6] !== 1'bx ) && ( tasa_prod_prev[6] !== tasa_prod_expected_prev[6] )
		&& ((tasa_prod_expected_prev[6] !== last_tasa_prod_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tasa_prod[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tasa_prod_expected_prev);
		$display ("     Real value = %b", tasa_prod_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_tasa_prod_exp[6] = tasa_prod_expected_prev[6];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#50000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module CONTROL_PRODUCCION_SIMULAR_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [3:0] bcd;
reg CLK_1MHZ;
reg clk_100hz;
reg enter;
reg mostrar;
reg num;
reg ok;
reg reset;
reg start;
// wires                                               
wire [4:0] dia_rep;
wire [8:0] pro_real;
wire [8:0] pro_rep;
wire [6:0] tasa_prod;

wire sampler;                             

// assign statements (if any)                          
CONTROL_PRODUCCION_SIMULAR i1 (
// port map - connection between master ports and signals/registers   
	.bcd(bcd),
	.CLK_1MHZ(CLK_1MHZ),
	.clk_100hz(clk_100hz),
	.dia_rep(dia_rep),
	.enter(enter),
	.mostrar(mostrar),
	.num(num),
	.ok(ok),
	.pro_real(pro_real),
	.pro_rep(pro_rep),
	.reset(reset),
	.start(start),
	.tasa_prod(tasa_prod)
);

// CLK_1MHZ
always
begin
	CLK_1MHZ = 1'b0;
	CLK_1MHZ = #5000 1'b1;
	#5000;
end 

// clk_100hz
initial
begin
	repeat(1666)
	begin
		clk_100hz = 1'b0;
		clk_100hz = #15000 1'b1;
		# 15000;
	end
	clk_100hz = 1'b0;
	clk_100hz = #15000 1'b1;
end 

// reset
initial
begin
	reset = 1'b0;
	reset = #10596 1'b1;
	reset = #9713 1'b0;
end 

// start
initial
begin
	start = 1'b0;
	start = #37969 1'b1;
	start = #16777 1'b0;
	start = #1268913 1'b1;
	start = #80055 1'b0;
end 
// bcd[ 3 ]
initial
begin
	bcd[3] = 1'b0;
end 
// bcd[ 2 ]
initial
begin
	bcd[2] = 1'b0;
	bcd[2] = #52980 1'b1;
	bcd[2] = #67991 1'b0;
	bcd[2] = #1244096 1'b1;
	bcd[2] = #245684 1'b0;
end 
// bcd[ 1 ]
initial
begin
	bcd[1] = 1'b0;
	bcd[1] = #1365067 1'b1;
	bcd[1] = #416835 1'b0;
end 
// bcd[ 0 ]
initial
begin
	bcd[0] = 1'b0;
	bcd[0] = #52980 1'b1;
	bcd[0] = #67991 1'b0;
end 

// num
initial
begin
	num = 1'b1;
	num = #66000 1'b0;
	num = #44000 1'b1;
	num = #46291 1'b0;
	num = #55629 1'b1;
	num = #1259426 1'b0;
	num = #62111 1'b1;
	num = #95238 1'b0;
	num = #92476 1'b1;
	num = #115941 1'b0;
end 

// enter
initial
begin
	enter = 1'b0;
	enter = #345253 1'b1;
	enter = #58278 1'b0;
	enter = #1664083 1'b1;
	enter = #102139 1'b0;
end 

// mostrar
initial
begin
	mostrar = 1'b0;
end 

// ok
initial
begin
	ok = 1'b0;
end 

CONTROL_PRODUCCION_SIMULAR_vlg_sample_tst tb_sample (
	.bcd(bcd),
	.CLK_1MHZ(CLK_1MHZ),
	.clk_100hz(clk_100hz),
	.enter(enter),
	.mostrar(mostrar),
	.num(num),
	.ok(ok),
	.reset(reset),
	.start(start),
	.sampler_tx(sampler)
);

CONTROL_PRODUCCION_SIMULAR_vlg_check_tst tb_out(
	.dia_rep(dia_rep),
	.pro_real(pro_real),
	.pro_rep(pro_rep),
	.tasa_prod(tasa_prod),
	.sampler_rx(sampler)
);
endmodule

